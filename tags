!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28b/
$NVIM_TUI_ENABLE_CURSOR_SHAPE	vimrc	/^let $NVIM_TUI_ENABLE_CURSOR_SHAPE = 1$/;"	v
$NVIM_TUI_ENABLE_TRUE_COLOR	vetc/theme.vim	/^  let $NVIM_TUI_ENABLE_TRUE_COLOR=1$/;"	v
$VISUAL	vimrc	/^  let $VISUAL = 'nvr -cc split --remote-wait'$/;"	v
'	vimrc	/^nnoremap ' `$/;"	m
<C-H>	vimrc	/^nnoremap <C-H> 5zh$/;"	m
<C-L>	vetc/sensible.vim	/^  nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>$/;"	m
<C-L>	vimrc	/^nnoremap <C-L> 5zl$/;"	m
<C-U>	vetc/sensible.vim	/^inoremap <C-U> <C-G>u<C-U>$/;"	m
<C-\\>	vimrc	/^imap <C-\\> ✓✗$/;"	m
<C-e>	vimrc	/^inoremap <C-e> <ESC>ea$/;"	m
<C-g><Space>	vimrc	/^inoremap <C-g><Space> <Esc>\/<++><Enter>"_c4l$/;"	m
<C-h>	vimrc	/^nnoremap <C-h> ^$/;"	m
<C-j>	vimrc	/^map <C-j> :cn<CR>$/;"	m
<C-k>	vimrc	/^map <C-k> :cp<CR>$/;"	m
<C-l>	vimrc	/^nnoremap <C-l> \$$/;"	m
<C-q>	vimrc	/^noremap <C-q> <C-w>w$/;"	m
<F8>	vimrc	/^  nmap <F8> :TagbarToggle<CR>$/;"	m
<Leader><Space>	vimrc	/^nnoremap <silent> <Leader><Space> :nohlsearch<CR>$/;"	m
<Leader>j	vimrc	/^  map <Leader>j <Plug>(signjk-j)$/;"	m
<Leader>k	vimrc	/^  map <Leader>k <Plug>(signjk-k)$/;"	m
<S-Tab>	vimrc	/^nnoremap <S-Tab> <<$/;"	m
<S-Tab>	vimrc	/^vnoremap <S-Tab> <<<Esc>gv$/;"	m
<ScrollWheelDown>	vimrc	/^noremap <silent> <ScrollWheelDown> :call comfortable_motion#flick(10)<CR>$/;"	m
<ScrollWheelUp>	vimrc	/^noremap <silent> <ScrollWheelUp>   :call comfortable_motion#flick(-10)<CR>$/;"	m
<Tab>	vimrc	/^nnoremap <Tab>   >>$/;"	m
<Tab>	vimrc	/^vnoremap <Tab>   >><Esc>gv$/;"	m
<bs>	vimrc	/^nnoremap <bs> <C-W>w$/;"	m
<leader><S-Tab>	vimrc	/^map <leader><S-Tab> :bp<CR>$/;"	m
<leader><Tab>	vimrc	/^map <leader><Tab> :bn<CR>$/;"	m
<leader>O	vimrc	/^nmap <leader>O m`O<Esc>``$/;"	m
<leader>b	vetc/plugins.vim	/^  nnoremap <leader>b :Buffers<CR>$/;"	m
<leader>b	vimrc	/^  nnoremap <leader>b :Buffers<CR>$/;"	m
<leader>c	vetc/plugins.vim	/^  nnoremap <leader>c :Commits<CR>$/;"	m
<leader>c	vimrc	/^  nnoremap <leader>c :Commits<CR>$/;"	m
<leader>d	vimrc	/^noremap <leader>d K$/;"	m
<leader>f	vetc/plugins.vim	/^  nnoremap <leader>f :Rg!<CR>$/;"	m
<leader>f	vimrc	/^  nnoremap <leader>f :Rg!<CR>$/;"	m
<leader>g	vimrc	/^    nnoremap <leader>g :Gstatus<CR>$/;"	m
<leader>l	vimrc	/^nnoremap <leader>l :ls<CR>:b<space>$/;"	m
<leader>n	vimrc	/^nnoremap <leader>n :bn<CR>$/;"	m
<leader>o	vimrc	/^nmap <leader>o m`o<Esc>``$/;"	m
<leader>p	vimrc	/^nnoremap <leader>p :b#<CR>$/;"	m
<leader>p	vimrc	/^vnoremap <leader>p "_dP$/;"	m
<leader>s	vimrc	/^  noremap <leader>s :NERDTreeToggle<CR>$/;"	m
<leader>t	vetc/plugins.vim	/^  nnoremap <leader>t :Files<CR>$/;"	m
<leader>t	vimrc	/^  nnoremap <leader>t :Files<CR>$/;"	m
<leader>v	vimrc	/^nnoremap <leader>v "0p$/;"	m
<leader>ve	vimrc	/^nmap <silent> <leader>ve :e $MYVIMRC<CR>$/;"	m
<leader>vs	vimrc	/^nmap <silent> <leader>vs :so $MYVIMRC<CR>$/;"	m
<leader>w	vimrc	/^nnoremap <leader>w :bp\\|sp\\|bn\\|bd <CR>$/;"	m
APPLESCRIPT	bin/reload-browser	/^		\/usr\/bin\/osascript <<-APPLESCRIPT$/;"	h
ASDF	README.md	/^### ASDF$/;"	S
Ag	vetc/plugins.vim	/^  command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, {'options': '--delimiter : --nth 4..'}, </;"	c
Ag	vimrc	/^command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, {'options': '--delimiter : --nth 4..'}, <ba/;"	c
BACKGROUND	tmux.conf	/^BACKGROUND=default$/;"	k
BRIGHTS	tmux.conf	/^BRIGHTS=cyan$/;"	k
Brewfile	README.md	/^## Brewfile$/;"	s
COPYCMD	tmux.conf	/^COPYCMD="reattach-to-user-namespace pbcopy"$/;"	k
DIMZ	tmux.conf	/^DIMZ=colour241$/;"	k
DOTME	README.md	/^## DOTME$/;"	s
Files	vetc/plugins.vim	/^  command! -bang -nargs=? -complete=dir Files$/;"	c
Files	vimrc	/^command! -bang -nargs=? -complete=dir Files$/;"	c
H	vimrc	/^noremap H     ^$/;"	m
J	vimrc	/^vnoremap J :m '>+1<CR>gv=gv$/;"	m
K	vimrc	/^vnoremap K :m '<-2<CR>gv=gv$/;"	m
L	vimrc	/^  omap L <Plug>(textobj-signjk-lines)$/;"	m
L	vimrc	/^  vmap L <Plug>(textobj-signjk-lines)$/;"	m
L	vimrc	/^noremap L     \$$/;"	m
My Path of Vim	other/vim.md	/^My Path of Vim$/;"	c
NERDTreeAutoDeleteBuffer	vimrc	/^  let NERDTreeAutoDeleteBuffer = 1$/;"	v
NERDTreeDirArrows	vimrc	/^  let NERDTreeDirArrows = 1$/;"	v
NERDTreeMinimalUI	vimrc	/^  let NERDTreeMinimalUI = 1$/;"	v
NERDTreeQuitOnOpen	vimrc	/^  let NERDTreeQuitOnOpen = 1$/;"	v
OTHER	README.md	/^### OTHER$/;"	S
Post Setup	README.md	/^## Post Setup$/;"	s
Q	vimrc	/^nnoremap Q @q$/;"	m
RCM	README.md	/^## RCM$/;"	s
Rg	vetc/plugins.vim	/^  command! -bang -nargs=* Rg$/;"	c
Rg	vimrc	/^command! -bang -nargs=* Rg$/;"	c
STEPS	README.md	/^## STEPS$/;"	s
The dots	README.md	/^# The dots$/;"	c
Y	vimrc	/^nnoremap Y y\$$/;"	m
]e	vimrc	/^    nmap <silent> ]e <Plug>(ale_next_wrap)$/;"	m
debug	bash/bash_prompt.bash	/^debug() {$/;"	f
debug	bash/pureline.bash	/^debug() {$/;"	f
format_time	bash/bash_prompt.bash	/^format_time() {$/;"	f
format_time	bash/pureline.bash	/^format_time() {$/;"	f
g:CoolTotalMatches	vetc/plugins.vim	/^  let g:CoolTotalMatches = 1$/;"	v
g:CoolTotalMatches	vimrc	/^  let g:CoolTotalMatches = 1$/;"	v
g:SnazzyTransparent	vetc/theme.vim	/^  let g:SnazzyTransparent = 0$/;"	v
g:ackprg	vimrc	/^  let g:ackprg = 'rg --vimgrep'$/;"	v
g:airline#extensions#ale#enabled	vimrc	/^    let g:airline#extensions#ale#enabled = 1$/;"	v
g:airline_left_sep	vetc/airline_config.vim	/^let g:airline_left_sep = ""$/;"	v
g:airline_mode_map	vetc/airline_config.vim	/^let g:airline_mode_map = {$/;"	v
g:airline_powerline_fonts	vetc/airline_config.vim	/^let g:airline_powerline_fonts = 0$/;"	v
g:airline_right_sep	vetc/airline_config.vim	/^let g:airline_right_sep = ""$/;"	v
g:airline_section_y	vetc/airline_config.vim	/^let g:airline_section_y = ''$/;"	v
g:airline_theme	vetc/airline_config.vim	/^let g:airline_theme='raven'$/;"	v
g:airline_theme	vimrc	/^let g:airline_theme='angr'$/;"	v
g:ale_fix_on_save	vimrc	/^    let g:ale_fix_on_save = 0$/;"	v
g:ale_fixers	vimrc	/^    let g:ale_fixers = {$/;"	v
g:ale_lint_on_enter	vimrc	/^    let g:ale_lint_on_enter = 0$/;"	v
g:ale_lint_on_save	vimrc	/^    let g:ale_lint_on_save = 1$/;"	v
g:ale_lint_on_text_changed	vimrc	/^    let g:ale_lint_on_text_changed = 'normal'$/;"	v
g:ale_linters	vimrc	/^    let g:ale_linters = {$/;"	v
g:comfortable_motion_air_drag	vimrc	/^  let g:comfortable_motion_air_drag = 8.0$/;"	v
g:comfortable_motion_friction	vimrc	/^  let g:comfortable_motion_friction = 300.0$/;"	v
g:grepprg	vimrc	/^  let g:grepprg = 'rg --vimgrep'$/;"	v
g:jsx_ext_required	vimrc	/^let g:jsx_ext_required = 0$/;"	v
g:loaded_sensible	vetc/sensible.vim	/^  let g:loaded_sensible = 'yes'$/;"	v
g:materialmonokai_italic	vetc/theme.vim	/^let g:materialmonokai_italic=1$/;"	v
g:materialmonokai_subtle_spell	vetc/theme.vim	/^let g:materialmonokai_subtle_spell=1$/;"	v
g:netrw_liststyle	vimrc	/^let g:netrw_liststyle = 3$/;"	v
g:qs_highlight_on_keys	vimrc	/^  let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']$/;"	v
g:rehash256	vetc/theme.vim	/^  let g:rehash256 = 1$/;"	v
gV	vimrc	/^nnoremap gV `[v`]$/;"	m
git_info	zsh/prompt.zsh	/^git_info() {$/;"	f
j	vimrc	/^nmap j gj$/;"	m
jj	vimrc	/^inoremap jj <C-\\><C-n>$/;"	m
k	vimrc	/^nmap k gk$/;"	m
lazy_load	zsh/lazy.zsh	/^function lazy_load() {$/;"	f
lazy_load_clean	zsh/lazy.zsh	/^function lazy_load_clean() {$/;"	f
mapleader	vimrc	/^let mapleader = "\\<Space>"$/;"	v
node	bash/lazy_nvm.sh	/^node() {$/;"	f
npm	bash/lazy_nvm.sh	/^npm() {$/;"	f
nvm	bash/lazy_nvm.sh	/^nvm() {$/;"	f
precmd	zsh/prompt.zsh	/^function precmd() {$/;"	f
preexec	zsh/prompt.zsh	/^function preexec() {$/;"	f
prompt	bash/pureline.bash	/^prompt() {$/;"	f
prompt_command	bash/bash_prompt.bash	/^function prompt_command() {$/;"	f
setup git	README.md	/^## setup git$/;"	s
shell	README.md	/^### shell$/;"	S
ssh_info	zsh/prompt.zsh	/^ssh_info() {$/;"	f
style fg	tmux.conf	/^set -g message-style fg=black,bg=$BRIGHTS,none$/;"	k
style fg	tmux.conf	/^set -g pane-active-border-style fg=$BRIGHTS,bg=default$/;"	k
style fg	tmux.conf	/^set -g pane-border-style fg=$DIMZ,bg=default$/;"	k
style fg	tmux.conf	/^set -g status-style fg=$DIMZ,bg=default,$DIM$/;"	k
style fg	tmux.conf	/^setw -g mode-style fg=colour196,bg=colour238,bold$/;"	k
style fg	tmux.conf	/^setw -g window-status-bell-style fg=colour255,bg=colour1,bold$/;"	k
style fg	tmux.conf	/^setw -g window-status-current-style fg=$BRIGHTS,bg=default,bold$/;"	k
style fg	tmux.conf	/^setw -g window-status-style fg=$DIMZ,bg=default,none$/;"	k
t	tmux.conf	/^bind -n C-s select-pane -t :.+$/;"	k
terminal	tmux.conf	/^set -ga terminal-override ,external-terminal:Tc$/;"	k
usage	bin/reload-browser	/^usage() {$/;"	f
{lazy_func}	zsh/lazy.zsh	/^    function ${lazy_func}() {$/;"	f
