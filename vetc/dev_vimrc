set number
set hidden
set tabstop=2             " tab spacing
set softtabstop=2         " unify
set shiftwidth=2          " indent/outdent by 2 columns
set shiftround            " always indent/outdent to the nearest tabstop
set expandtab
set smarttab
filetype indent on
set lazyredraw
set hlsearch              " Don't continue to highlight searched phrases.
set incsearch             " But do highlight as you type your search.
set mouse=a
set autowrite
set autoread
set noswapfile
set nobackup
set laststatus=0
" set inccommand=nosplit  " can't use this with traces.vim
set ruler
set clipboard=unnamed     " use the system clipboard as default
set list listchars=tab:»\ ,trail:·,nbsp:· ",eol:¬ ,space:· " display extra white space
set shortmess=a
set omnifunc=syntaxcomplete#Complete
set splitbelow
set splitright

augroup numbertoggle
  autocmd!
  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
augroup END

augroup quickfix
  autocmd!
  " automatic location/quickfix window
  autocmd QuickFixCmdPost [^l]* cwindow
  autocmd QuickFixCmdPost    l* lwindow
  autocmd VimEnter            * cwindow
augroup END

augroup filetypes
  autocmd!
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS noci
augroup END


if executable('rg')
  set grepprg=rg\ --vimgrep
  set grepformat=%f:%l:%c:%m
endif

"************"
"** KEYMAP **"
"************"
" better completion menu
" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

inoremap        ,,      <C-n><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
inoremap        ,.      <C-x><C-o><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
inoremap        ,>      <C-x><C-u><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
inoremap        ,;      <C-x><C-f><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
inoremap        ,:      <C-x><C-l><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>

inoremap        ,,      <C-n><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
inoremap        ,o      <C-x><C-o><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
inoremap        ,u      <C-x><C-u><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
inoremap        ,f      <C-x><C-f><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
inoremap        ,l      <C-x><C-l><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>


set completeopt+=menuone,noselect


" easier beginning and end of line
nnoremap H     ^
nnoremap L     $
" make marks more better (go to column instead of line)
nnoremap ' `

" <C-e/E> work like E but in insert mode
inoremap <C-e> <esc>ea
inoremap <C-t> <Esc>/[)}"'\]>]<CR>:nohl<CR>a
inoremap <C-b> <Esc>?[({"'\[<]<CR>:nohl<CR>i
inoremap <C-h> <left>
inoremap <C-l> <right>


" Y goes to end of line
nnoremap Y y$
" Select your Leader key
let mapleader = "\<Space>"
" leader space cancels search highlighting
nnoremap <silent> <Leader><Space> :nohlsearch<CR>

" replace all occurences of word under cursor. $= in paragraph
nnoremap <leader>$ :'{,'}s/\<<C-r>=expand("<cword>")<CR>\>/
nnoremap <leader>% :%s/\<<C-r>=expand("<cword>")<CR>\>/

" buffer switch
nnoremap <leader>l :ls<CR>:b<space>
nnoremap <leader>p :bp<CR>
nnoremap <bs> :b#<CR>
nnoremap <leader>n :bn<CR>

" move to next <++> and go to insert mode
inoremap <C-g><Space> <Esc>/<++><Enter>"_c4l


" visual up and down
nmap j gj
nmap k gk

" > and < indent in normal and visual mode
nnoremap > >>
nnoremap < <<

" highlight last inserted text
nnoremap gV `[v`]

" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" ctrl j and k to move in quickfix windows
nnoremap <silent> <C-j> :cn<CR>
nnoremap <silent> <C-k> :cp<CR>
nnoremap <silent> \\ :copen<CR>
nnoremap <silent> \|\| :cclose<CR>



"cycle splits
nnoremap <C-q> <C-w>w

" terminal - go to normal mode
tnoremap <C-\> <C-\><C-n>

"*************"
"*** PLUGS ***"
"*************"

" git clone https://github.com/k-takata/minpac.git \
"     ~/.config/nvim/pack/minpac/opt/minpac

" call plug#begin('~/.vim/plugged')
"   source $DOTFILES/vetc/plugins.vim

runtime **/myplugins.vim
  " text object
  " essentials
  " completion
  " markdown
  " lsp
  " useability
  " htmlcss
  " elixir
  " ruby
  " theme

" call plug#end()
 

"*************"
"*** THEME ***"
"*************"

set notermguicolors
set background=dark
colorscheme noctu

set fillchars+=vert:│

function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

set statusline=
set statusline+=%#PmenuSel#
set statusline+=%{StatuslineGit()}
set statusline+=%#user6#
set statusline+=\ %f
set statusline+=%m\ 
set statusline+=%=
set statusline+=%#user8#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=%#user5#
set statusline+=\ <>
set statusline+=%#user8#
set statusline+=\ %p%%
set statusline+=%#user6#
set statusline+=\ %l:%c
set statusline+=\ 
set laststatus=2

