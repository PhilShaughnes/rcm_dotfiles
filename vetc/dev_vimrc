set number
set hidden
set tabstop=2             " tab spacing
set softtabstop=2         " unify
set shiftwidth=2          " indent/outdent by 2 columns
set shiftround            " always indent/outdent to the nearest tabstop
set expandtab
set gdefault              " apply substitutions globally on lines
set smarttab
filetype indent on
set lazyredraw
set hlsearch              " Don't continue to highlight searched phrases.
set incsearch             " But do highlight as you type your search.
set mouse=a
set autowrite
set autoread
set noswapfile
set nobackup
set linebreak
set laststatus=0
" set inccommand=nosplit  " can't use this with traces.vim
set ruler
set clipboard=unnamed     " use the system clipboard as default
set list listchars=tab:»\ ,trail:·,nbsp:· ",eol:¬ ,space:· " display extra white space
set shortmess=a
set omnifunc=syntaxcomplete#Complete
set splitbelow
set splitright
set completeopt+=menu,longest ",noselect
set cursorcolumn

if executable('rg')
  set grepprg=rg\ --vimgrep
  set grepformat=%f:%l:%c:%m
endif

augroup TermOpen
  autocmd!
  autocmd BufEnter term://* startinsert
  autocmd TermOpen * setlocal nonumber norelativenumber
augroup end

augroup quickfix
  autocmd!
  " automatic location/quickfix window
  autocmd QuickFixCmdPost [^l]* cwindow
  autocmd QuickFixCmdPost    l* lwindow
  autocmd VimEnter            * cwindow

  autocmd WinEnter,BufEnter,FocusGained * checktime
  autocmd FocusLost * silent! wa
augroup END

augroup filetypes
  autocmd!
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType javascript comp eslint
  autocmd BufWritePost *.js silent make! <afile> | silent redraw!
augroup END



"************"
"** KEYMAP **"
"************"
" better completion menu
" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

inoremap        ,,      <C-n><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
inoremap        ,.      <C-x><C-o><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
inoremap        ,>      <C-x><C-u><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
inoremap        ,;      <C-x><C-f><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
inoremap        ,:      <C-x><C-l><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>

" inoremap        ,,      <C-n><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
" inoremap        ,i      <C-x><C-i><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
" inoremap        ,o      <C-x><C-o><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
" inoremap        ,u      <C-x><C-u><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
" inoremap        ,f      <C-x><C-f><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
" inoremap        ,l      <C-x><C-l><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>

inoremap <C-v> <C-x><C-u>
inoremap <C-t> <C-x><C-l>
inoremap <C-b> <C-x><C-o>
inoremap <C-f> <C-x><C-f>
inoremap <C-g> <C-x><C-p>


" easier beginning and end of line
noremap H     ^
noremap L     $
" make marks more better (go to column instead of line)
noremap ' `

" <C-e/E> work like E but in insert mode
inoremap <C-e> <esc>ea
" inoremap <C-t> <Esc>/[)}"'\]>]<CR>:nohl<CR>a
" inoremap <C-b> <Esc>?[({"'\[<]<CR>:nohl<CR>i
inoremap <C-h> <left>
inoremap <C-l> <right>

" Y goes to end of line
nnoremap Y y$
" Select your Leader key
let mapleader = "\<Space>"
" leader space cancels search highlighting
nnoremap <silent> <Leader><Space> :nohlsearch<CR>

" replace all occurences of word under cursor. $= in paragraph
nnoremap <leader>/ :'{,'}s/\<<C-r>=expand("<cword>")<CR>\>/
nnoremap <leader>% :%s/\<<C-r>=expand("<cword>")<CR>\>/
vnoremap <leader>/ y:%s/<C-r>"/

" find all occurances of a thing in all open/saved buffers
nnoremap <leader>s :cex []<CR> :silent bufdo grepadd '' % <S-Left><Left><Left>
nnoremap <leader>d :cex []<CR> :silent bufdo grepadd '<C-r><C-w>' %<CR>

" buffer switch
nnoremap <leader>l :ls<CR>:b<space>
nnoremap <leader>p :bp<CR>
nnoremap <bs> :b#<CR>
nnoremap <leader>n :bn<CR>

" move to next <++> and go to insert mode
" inoremap <C-g><Space> <Esc>/<++><Enter>"_c4l


" visual up and down
nmap j gj
nmap k gk

" > and < indent in normal and visual mode
nnoremap > >>
nnoremap < <<
vnoremap > >gv
vnoremap < <gv


" highlight last inserted text
nnoremap gV `[v`]

" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" ctrl j and k to move in quickfix windows
" nnoremap <silent> <C-j> :cn<CR>
" nnoremap <silent> <C-k> :cp<CR>


"cycle splits
nnoremap <C-q> <C-w>w

" terminal - go to normal mode
tnoremap <C-\> <C-\><C-n>

"*************"
"*** PLUGS ***"
"*************"

" git clone https://github.com/kristijanhusak/vim-packager ~/.config/nvim/pack/packager/opt/vim-packager

" runtime **/myplugins.vim
source $DOTFILES/config/nvim/myplugins.vim

"*************"
"*** THEME ***"
"*************"

set notermguicolors
set background=dark
colorscheme noctu
set fillchars+=vert:│
set laststatus=2

" set statusline=%#user6#(%n)\ %f%m%#user8#\ %{FugitiveHead()}
" set statusline+=%=%#user8#%y\ %p%%%#user6#\ <>\ %#user8#%c:%l/%L\ 

set statusline=%6*(%n)%{v:register}\ %f%m\ %8*%{FugitiveHead()}%=
set statusline+=%y\ %p%%\ %6*<>\ %8*%c:%l/%L\ 

