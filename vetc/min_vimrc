set number
set hidden
set tabstop=2             " tab spacing
set softtabstop=2         " unify
set shiftwidth=2          " indent/outdent by 2 columns
set shiftround            " always indent/outdent to the nearest tabstop
set expandtab
set gdefault              " apply substitutions globally on lines
set smarttab
filetype indent on
set lazyredraw
set hlsearch              " Don't continue to highlight searched phrases.
set incsearch             " But do highlight as you type your search.
set mouse=a
set autowrite
set autoread
set noswapfile
set nobackup
set laststatus=0
" set inccommand=nosplit  " can't use this with traces.vim
set ruler
set clipboard=unnamed     " use the system clipboard as default
set list listchars=tab:»\ ,trail:·,nbsp:· ",eol:¬ ,space:· " display extra white space
set shortmess=a
set omnifunc=syntaxcomplete#Complete
set splitbelow
set splitright
set completeopt+=menu,longest ",noselect

if executable('rg')
  set grepprg=rg\ --vimgrep
  set grepformat=%f:%l:%c:%m
endif

augroup TermOpen
  autocmd!
  autocmd BufEnter term://* startinsert
  autocmd TermOpen * setlocal nonumber norelativenumber
augroup end

augroup quickfix
  autocmd!
  " automatic location/quickfix window
  autocmd QuickFixCmdPost [^l]* cwindow
  autocmd QuickFixCmdPost    l* lwindow
  autocmd VimEnter            * cwindow

  autocmd WinEnter,BufEnter,FocusGained * checktime
  autocmd FocusLost * silent! wa
augroup END

augroup filetypes
  autocmd!
  autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS noci
augroup END



"************"
"** KEYMAP **"
"************"
" better completion menu
" inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
" inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"

inoremap        ,,      <C-n><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
inoremap        ,.      <C-x><C-o><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
inoremap        ,>      <C-x><C-u><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
inoremap        ,;      <C-x><C-f><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
inoremap        ,:      <C-x><C-l><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>

" inoremap        ,,      <C-n><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
" inoremap        ,i      <C-x><C-i><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
" inoremap        ,o      <C-x><C-o><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
" inoremap        ,u      <C-x><C-u><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
" inoremap        ,f      <C-x><C-f><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>
" inoremap        ,l      <C-x><C-l><C-r>=pumvisible() ? "\<lt>Down>\<lt>C-p>\<lt>Down>\<lt>C-p>" : ""<CR>

inoremap <C-v> <C-x><C-u>
inoremap <C-t> <C-x><C-l>
inoremap <C-b> <C-x><C-o>
inoremap <C-f> <C-x><C-f>
" inoremap <C-g> <C-x><C-p>


" easier beginning and end of line
noremap H     ^
noremap L     $
" make marks more better (go to column instead of line)
noremap ' `

" <C-e/E> work like E but in insert mode
inoremap <C-e> <esc>ea
" inoremap <C-t> <Esc>/[)}"'\]>]<CR>:nohl<CR>a
" inoremap <C-b> <Esc>?[({"'\[<]<CR>:nohl<CR>i
inoremap <C-h> <left>
inoremap <C-l> <right>

" Y goes to end of line
nnoremap Y y$
" Select your Leader key
let mapleader = "\<Space>"
" leader space cancels search highlighting
nnoremap <silent> <Leader><Space> :nohlsearch<CR>

" replace all occurences of word under cursor. $= in paragraph
nnoremap <leader>/ :'{,'}s/\<<C-r>=expand("<cword>")<CR>\>/
nnoremap <leader>% :%s/\<<C-r>=expand("<cword>")<CR>\>/

" find all occurances of a thing in all open/saved buffers
nnoremap <leader>s :cex []<CR> :silent bufdo grepadd '' % <S-Left><Left><Left>
nnoremap <leader>d :cex []<CR> :silent bufdo grepadd '<C-r><C-w>' %<CR>

" buffer switch
nnoremap <leader>l :ls<CR>:b<space>
nnoremap <leader>p :bp<CR>
nnoremap <bs> :b#<CR>
nnoremap <leader>n :bn<CR>

" move to next <++> and go to insert mode
inoremap <C-g><Space> <Esc>/<++><Enter>"_c4l


" visual up and down
nmap j gj
nmap k gk

" > and < indent in normal and visual mode
nnoremap > >>
nnoremap < <<

" highlight last inserted text
nnoremap gV `[v`]

" Move visual block
vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

" ctrl j and k to move in quickfix windows
nnoremap <silent> <C-j> :cn<CR>
nnoremap <silent> <C-k> :cp<CR>
nnoremap <silent> \\ :cclose<CR>
nnoremap <silent> \|\| :copen<CR>


"cycle splits
nnoremap <C-q> <C-w>w

" terminal - go to normal mode
tnoremap <C-\> <C-\><C-n>

"*************"
"*** PLUGS ***"
"*************"
" run this to install packager the first time:
" git clone https://github.com/kristijanhusak/vim-packager ~/.config/nvim/pack/packager/opt/vim-packager

" Load packager only when you need it
function! PackagerInit() abort
  packadd vim-packager
  call packager#init()
  call packager#add('kristijanhusak/vim-packager', { 'type': 'opt' })

  call packager#add('junegunn/vim-peekaboo', { 'type': 'opt' })          " peak at registers with \" and @ and <C-R>
  call packager#add('tpope/vim-sleuth', { 'type': 'opt' })               " auto detects and sets shiftwidth, expandtab, etc.
  call packager#add('wellle/tmux-complete.vim', { 'type': 'opt' })
  call packager#add('romainl/vim-devdocs', { 'type': 'opt' })            " use :DD to look up keywords on devdocs.io
  call packager#add('tommcdo/vim-lion', { 'type': 'opt' })               " gl and gL align around a character (so glip=)
  call packager#add('kana/vim-textobj-user')
  call packager#add('kana/vim-textobj-line')
  call packager#add('kana/vim-textobj-entire')
  call packager#add('michaeljsmith/vim-indent-object')

  call packager#add('machakann/vim-sandwich')
  call packager#add('tpope/vim-endwise')
  call packager#add('markonm/traces.vim')
  call packager#add('AndrewRadev/splitjoin.vim', { 'type': 'opt' })      " gS and gJ split and join functions/statements into single/multi line

  call packager#add('justinmk/vim-dirvish')
  call packager#add('kristijanhusak/vim-dirvish-git')
  call packager#add('justinmk/vim-gtfo')                                 " got and gof open current file in terminal/file manager

  call packager#add('plasticboy/vim-markdown', { 'type': 'opt' })

  call packager#add('sheerun/vim-polyglot')
  call packager#add('airblade/vim-gitgutter')
  call packager#add('tpope/vim-fugitive')
  call packager#add('tpope/vim-commentary')                              "comment stuff out with gc (gcc to do a line)
  call packager#add('kana/vim-niceblock')                                " make A and I work for all visual modes

  call packager#add('romainl/vim-cool')
  call packager#add('romainl/vim-qlist')
  call packager#add('romainl/vim-qf')

  call packager#local('/usr/local/opt/fzf')
  call packager#local('~/.fzf')
  call packager#add('junegunn/fzf.vim')

endfunction

command! PackagerInstall call PackagerInit() | call packager#install()
command! -bang PackagerUpdate call PackagerInit() | call packager#update({ 'force_hooks': '<bang>' })
command! PackagerClean call PackagerInit() | call packager#clean()
command! PackagerStatus call PackagerInit() | call packager#status()

"Load plugins only for specific filetype
augroup packager_filetype
  autocmd!
  " autocmd FileType javascript packadd vim-js-file-import
  " autocmd FileType go packadd vim-go
  " autocmd FileType php packadd phpactor
  autocmd FileType markdown packadd vim-markdown
augroup END

" vim-cool settings:
let g:CoolTotalMatches = 1

" fugitive:
nnoremap <leader>g :Gstatus<CR>

" qf
" nmap <C-k> <Plug>(qf_qf_previous)
" nmap <C-j> <Plug>(qf_qf_next)
nmap <leader>k <Plug>(qf_loc_previous)
nmap <leader>j <Plug>(qf_loc_next)
nmap \|\| <Plug>(qf_loc_toggle)
nmap \\ <Plug>(qf_qf_toggle)

" FZF settings:

"let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -l -g ""'
"
  nnoremap <leader>t :Files<CR>
  nnoremap <leader>b :Buffers<CR>
  nnoremap <leader>c :Commits<CR>
  nnoremap <leader>f :Rg!<CR>

  " Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
  command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
    \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
    \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%', '?'),
    \   <bang>0)

  " Likewise, Files command with preview window
  command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

  command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, {'options': '--delimiter : --nth 4..'}, <bang>0)


"*************"
"*** THEME ***"
"*************"

set notermguicolors
set background=dark
colorscheme noctu
set fillchars+=vert:│
set laststatus=2

" set statusline=%#user6#(%n)\ %f%m%#user8#\ %{FugitiveHead()}
" set statusline+=%=%#user8#%y\ %p%%%#user6#\ <>\ %#user8#%c:%l/%L\ 

set statusline=%6*(%n)%{v:register}\ %f%m\ %8*%{FugitiveHead()}%=
set statusline+=%y\ %p%%\ %6*<>\ %8*%c:%l/%L\ 

