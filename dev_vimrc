set number
set tabstop=2             " tab spacing
set softtabstop=2         " unify
set shiftwidth=2          " indent/outdent by 2 columns
set shiftround            " always indent/outdent to the nearest tabstop
set expandtab
set smarttab
filetype indent on
set lazyredraw
set hlsearch              " Don't continue to highlight searched phrases.
set incsearch             " But do highlight as you type your search.
set mouse=a
set autowrite
set autoread
set noswapfile
set nobackup
set laststatus=0
set inccommand=nosplit
set ruler
set clipboard=unnamed     " use the system clipboard as default
set list listchars=tab:»\ ,trail:·,nbsp:· ",eol:¬ ,space:· " display extra white space

:augroup numbertoggle
:  autocmd!
:  autocmd BufEnter,FocusGained,InsertLeave * set relativenumber
:  autocmd BufLeave,FocusLost,InsertEnter   * set norelativenumber
:augroup END

if executable('rg')
  let g:ackprg = 'rg --vimgrep'
endif

"************"
"** KEYMAP **"
"************"

" leader k to hook into documentation lookup (we will remap K below)
noremap <leader>k K
" J/K to go to above/below white space (paragraph)
noremap K     {
noremap J     }
noremap H     ^
noremap L     $
" make marks more better (go to column instead of line)
nnoremap ' `

" Y goes to end of line
nnoremap Y y$
" Select your Leader key
let mapleader = "\<Space>"
" Enter cancels search highlighting
nnoremap \ :nohlsearch<CR>

" visual up and down
nmap j gj
nmap k gk

" Tab and S-Tab indent in normal and visual mode
nnoremap <Tab>   >>
nnoremap <S-Tab> <<
vnoremap <Tab>   >><Esc>gv
vnoremap <S-Tab> <<<Esc>gv

" highlight last inserted text
nnoremap gV `[v`]


"*************"
"*** PLUGS ***"
"*************"
call plug#begin('~/.vim/plugged')

Plug 'jeffkreeftmeijer/vim-dim'
Plug 'rakr/vim-two-firewatch'

Plug 'sheerun/vim-polyglot'
Plug 'machakann/vim-sandwich'
Plug 'kana/vim-niceblock'                            " make A and I work for all visual modes
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-line'
Plug 'kana/vim-textobj-function'
Plug 'kana/vim-textobj-entire'
Plug 'michaeljsmith/vim-indent-object'
Plug 'wellle/targets.vim'

Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'                          "comment stuff out with gc (gcc to do a line)

Plug 'romainl/vim-cool'
  let g:CoolTotalMatches = 1

Plug '/usr/local/opt/fzf'
Plug '~/.fzf'
Plug 'junegunn/fzf.vim'
  "let $FZF_DEFAULT_COMMAND = 'ag --hidden --ignore .git -l -g ""'
  nnoremap <leader>t :Files<CR>
  nnoremap <leader>b :Buffers<CR>
  nnoremap <leader>c :Commits<CR>
  nnoremap <leader>f :Rg!<CR>

  " Similarly, we can apply it to fzf#vim#grep. To use ripgrep instead of ag:
  command! -bang -nargs=* Rg
    \ call fzf#vim#grep(
    \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
    \   <bang>0 ? fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'up:60%')
    \           : fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}, 'right:50%', '?'),
    \   <bang>0)

  " Likewise, Files command with preview window
  command! -bang -nargs=? -complete=dir Files
    \ call fzf#vim#files(<q-args>, fzf#vim#with_preview(), <bang>0)

  command! -bang -nargs=* Ag call fzf#vim#ag(<q-args>, {'options': '--delimiter : --nth 4..'}, <bang>0)

call plug#end()


"*************"
"*** THEME ***"
"*************"

set termguicolors
set background=dark
colorscheme two-firewatch
